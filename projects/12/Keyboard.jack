/**
 * A library for handling user input from the keyboard.
 */
class Keyboard
{
	/** Initializes the keyboard. */
	function void init()
	{
		return;
	} 

	/**
	 * Returns the ASCII code (as char) of the currently pressed key,
	 * or 0 if no key is currently pressed.
	 * Recognizes all ASCII characters, as well as the following extension
	 * of action keys:
	 * New line = 128 = String.newline()
	 * Backspace = 129 = String.backspace()
	 * Left Arrow = 130
	 * Up Arrow = 131
	 * Right Arrow = 132
	 * Down Arrow = 133
	 * Home = 134
	 * End = 135
	 * Page Up = 136
	 * Page Down = 137
	 * Insert = 138
	 * Delete = 139
	 * ESC = 140
	 * F1 - F12 = 141 - 152
	 */
	function char keyPressed()
	{
		return Memory.peek(24576);
	}

	/**								
	 * Reads the next character from the keyboard.
	 * waits until a key is pressed and then released, then echoes
	 * the key to the screen, and returns the value of the pressed key.
	 */
	function char readChar()
	{
		var char c1;
		var char c2;

		do Output.printChar(0);
		let c1 = Keyboard.keyPressed();
		while (c1 = 0)
		{
			let c1 = Keyboard.keyPressed();
		}

		/*
		 * Wait until a key is no longer pressed.
		 */
		let c2 = Keyboard.keyPressed();
		while (~(c2 = 0))
		{
			let c2 = Keyboard.keyPressed();
		}

		do Output.backSpace();
		if (~(c1 = String.backSpace()))
		{
			do Output.printChar(c1);
		}
		return c1;
	}

	/**								
	 * Prints the message on the screen, reads the next line
	 * (until a newline character) from the keyboard, and returns its value.
	 */
	function String readLine(String message)
	{
		var String s;
		var char c;

		let s = String.new(64);
		do Output.printString(message);
		while (true)
		{
			let c = Keyboard.readChar();
			if (c = String.newLine())
			{
				do Output.println();
				return s;
			}
			else
			{
				if (c = String.backSpace())
				{
					if (s.length() > 0)
					{
						/*
						 * Erase previous character.
						 */
						do Output.backSpace();
						do s.eraseLastChar();
					}
				}
				else
				{
					do s.appendChar(c);
				}
			}
		}
		return s;
	}   

	/**								
	 * Prints the message on the screen, reads the next line
	 * (until a newline character) from the keyboard, and returns its
	 * integer value (until the first non numeric character).
	 */
	function int readInt(String message)
	{
		var String s;

		let s = Keyboard.readLine(message);
		return s.intValue();
	}
}
