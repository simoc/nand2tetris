/**
 * A basic math library.
 */
class Math
{
    /** Initializes the library. */
    function void init()
	{
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x)
	{
		if (x < 0)
		{
			let x = -x;
		}
		return x;
    }

    /** Returns the product of x and y. */
	function int multiply(int x, int y)
	{
		var int total;
		var int n;
		var int xAccumulator;
		var int power2;
		var int yOrig;

		let total = 0;
		let n = 0;
		let xAccumulator = x;
		let power2 = 1;
		let yOrig = y;

		if (y < 0)
		{
			let y = -y;
		}

		while (n < 15)
		{
			if (~((y & power2) = 0))
			{
				/*
				 * If bit N is set in y, then add x*(2^N).
				 */
				let total = total + xAccumulator;
			}
			let power2 = power2 + power2;
			let n = n + 1;
			let xAccumulator = xAccumulator + xAccumulator;
		}

		if (yOrig < 0)
		{
			let total = -total;
		}

		return total;
	}

    function int divideRecursive(int x, int y, int yOrig, int n, int power2)
	{
		var int q;

		if (n > 15)
		{
			return 0;
		}

		if (y > x)
		{
			return 0;
		}

		let q = Math.divideRecursive(x, y + y, yOrig, n + 1, power2 + power2);
		if (q > 0)
		{
			let x = x - Math.multiply(q, yOrig);
		}

		if (~(y > x))
		{
			let q = q + power2;
		}

		return q;
	}

    /** Returns the integer part of x/y. */
    function int divide(int x, int y)
	{
		var int yOrig;
		var int xOrig;
		var int q;

		let yOrig = y;
		let xOrig = x;
		if (y = 0)
		{
			do Sys.error(55);
		}
		if (y < 0)
		{
			let y = -y;
		}
		if (x < 0)
		{
			let x = -x;
		}

		let q = Math.divideRecursive(x, y, y, 0, 1);
		if (yOrig < 0)
		{
			let q = -q;
		}
		if (xOrig < 0)
		{
			let q = -q;
		}
		return q;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x)
	{
		var int lower;
		var int upper;
		var int mid;
		var int sqMid;

		let lower = 0;
		let upper = 182; /* 181 * 181 = 32761 is largest possible result */

		if (x > 0)
		{
			while (true)
			{
				let mid = (lower + upper) / 2;
				let sqMid = mid * mid;
				if (sqMid < x)
				{
					let lower = mid;
				}
				else
				{
					if (sqMid = x)
					{
						return mid;
					}
					else
					{
						let upper = mid;
					}
				}
				if ((lower + 1) = upper)
				{
					/*
					 * Lower value squared is less than x.
					 * Upper value squared is greater than x.
					 * So return lower value.
					 */
					return lower;
				}
			}
		}
		return 0;
    }

    /** Returns the greater number. */
    function int max(int a, int b)
	{
		if (a > b)
		{
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b)
	{
		if (a < b)
		{
			return a;
		}
		return b;
    }
}
