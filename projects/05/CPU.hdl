// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// Decode A (load accumulator) or C (compute and/or jump) instruction
	Not(in=instruction[15], out=flagA);

	And(a=instruction[15], b=instruction[11], out=flagC1);
	And(a=instruction[15], b=instruction[10], out=flagC2);
	And(a=instruction[15], b=instruction[9], out=flagC3);
	And(a=instruction[15], b=instruction[8], out=flagC4);
	And(a=instruction[15], b=instruction[7], out=flagC5);
	And(a=instruction[15], b=instruction[6], out=flagC6);

	And(a=instruction[15], b=instruction[5], out=flagD1);
	And(a=instruction[15], b=instruction[4], out=flagD2);
	And(a=instruction[15], b=instruction[3], out=flagD3, out=writeM);

	And(a=instruction[15], b=instruction[2], out=flagJ1);
	And(a=instruction[15], b=instruction[1], out=flagJ2);
	And(a=instruction[15], b=instruction[0], out=flagJ3);

	// Using A or D in compute instruction?
	Mux16(a=bus2, b=instruction, sel=flagA, out=bus0);

	// A instruction, or saving result in A means that A is loaded
	Or(a=flagA, b=flagD1, out=loadA);
	ARegister(in=bus0, load=loadA, out=busA);
	Copy15(in=busA, out=addressM);

	And(a=instruction[15], b=instruction[12], out=useM);
	Mux16(a=busA, b=inM, sel=useM, out=bus1);

	DRegister(in=bus2, load=flagD2, out=busD);

	ALU(x=busD, y=bus1, zx=flagC1, nx=flagC2, zy=flagC3, ny=flagC4, f=flagC5, no=flagC6, out=bus2, zr=zr, ng=ng);
	Mux16(a=inM, b=bus2, sel=flagD3, out=outM);

	// Decide whether to jump, or not.
	And(a=flagJ2, b=zr, out=jump1);
	And(a=flagJ1, b=ng, out=jump2);
	Or(a=zr, b=ng, out=notPositive);
	Not(in=notPositive, out=positive);
	And(a=flagJ3, b=positive, out=jump3);

	Or(a=jump1, b=jump2, out=loadPC);
	Or(a=loadPC, b=jump3, out=loadPC2);
	Not(in=loadPC2, out=incPC);

	//Mux16(a=busA, b=bus2, sel=flagD1, out=loopA);
	//Mux16(a=busD, b=bus2, sel=flagD2, out=loopD);
	//Mux16(a=inM, b=bus2, sel=flagD3, out=outM);

	PC(in=busA, load=loadPC2, inc=incPC, reset=reset, out=pc16);
	Copy15(in=pc16, out=pc);
}

